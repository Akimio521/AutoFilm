name: AutoFilm Release

on:
  push:
    branches:
      - main
    paths:
      - app/version.py

env:
  APP_VERSION: "0.0.0"

jobs:
  Docker-build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    steps:
      - uses: actions/checkout@v4
  
      - name: APP Version
        run: |
          echo "APP_VERSION=$(cat app/version.py | sed -ne 's/APP_VERSION\s=\s"v\(.*\)"/\1/gp')" >> $GITHUB_ENV

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/autofilm
          tags: |
              type=raw,value=latest,enable=true
              type=raw,value=${{ env.APP_VERSION }},enable=true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Build Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: |
            linux/amd64
            linux/arm64/v8
          push: true
          build-args: |
            AUTOFILM_VERSION=${{ env.APP_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}-docker
          cache-to: type=gha, scope=${{ github.workflow }}-docker

  Create-release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [ Docker-build ]
    steps:
      - uses: actions/checkout@v2

      - name: Release Version
        id: release_version
        run: |
          echo "APP_VERSION=$(cat app/version.py | sed -ne 's/APP_VERSION\s=\s"v\(.*\)"/\1/gp')" >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.APP_VERSION }}
          release_name: v${{ env.APP_VERSION }}
          body: ${{ github.event.commits[0].message }}
          draft: false
          prerelease: false